// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2017 16:58:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SimpleCompArch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SimpleCompArch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg sys_clk;
reg sys_rst;
// wires                                               
wire [1:0] D_ALUs;
wire D_jpz;
wire [15:0] D_mdin_bus;
wire [15:0] D_mdout_bus;
wire [7:0] D_mem_addr;
wire D_Mre;
wire D_Mwe;
wire D_PCld;
wire [15:0] D_rfout_bus;
wire [3:0] D_RFr1a;
wire D_RFr1e;
wire [3:0] D_RFr2a;
wire D_RFr2e;
wire [1:0] D_RFs;
wire [3:0] D_RFwa;
wire D_RFwe;
wire [15:0] sys_output;

// assign statements (if any)                          
SimpleCompArch i1 (
// port map - connection between master ports and signals/registers   
	.D_ALUs(D_ALUs),
	.D_jpz(D_jpz),
	.D_mdin_bus(D_mdin_bus),
	.D_mdout_bus(D_mdout_bus),
	.D_mem_addr(D_mem_addr),
	.D_Mre(D_Mre),
	.D_Mwe(D_Mwe),
	.D_PCld(D_PCld),
	.D_rfout_bus(D_rfout_bus),
	.D_RFr1a(D_RFr1a),
	.D_RFr1e(D_RFr1e),
	.D_RFr2a(D_RFr2a),
	.D_RFr2e(D_RFr2e),
	.D_RFs(D_RFs),
	.D_RFwa(D_RFwa),
	.D_RFwe(D_RFwe),
	.sys_clk(sys_clk),
	.sys_output(sys_output),
	.sys_rst(sys_rst)
);
initial 
begin 
#7000000 $finish;
end 

// sys_clk
always
begin
	sys_clk = 1'b0;
	sys_clk = #5000 1'b1;
	#5000;
end 

// sys_rst
initial
begin
	sys_rst = 1'b1;
	sys_rst = #40000 1'b0;
end 
endmodule

